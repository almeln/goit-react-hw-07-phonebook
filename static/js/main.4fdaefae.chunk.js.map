{"version":3,"sources":["components/ContactItem/ContactItem.module.css","components/Container/Container.module.css","components/Filter/Filter.module.css","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/ContactItem/ContactItem.js","components/ContactList/ContactList.js","components/Container/Container.js","redux/contacts/contacts-actions.js","components/Filter/Filter.js","components/App.jsx","redux/contacts/contacts-reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","axios","defaults","baseURL","fetchContacts","createAsyncThunk","_","a","rejectWithValue","get","data","addContact","name","number","contact","post","deleteContact","contactId","delete","getItems","state","contacts","items","getFilter","filter","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","includes","ContactForm","useState","setName","setNumber","useSelector","dispatch","useDispatch","console","log","handleInputChange","event","currentTarget","value","reset","className","css","form","onSubmit","preventDefault","find","toast","error","formInputLabel","formInput","type","onChange","pattern","title","required","formInputBtn","ContactItem","onDelete","contactItemName","contactItemNumber","deleteBtn","onClick","ContactList","map","id","contactItem","onDeleteContact","Container","children","container","changeFilter","createAction","Filter","filterInput","target","App","useEffect","itemsReducer","createReducer","fulfilled","payload","filterReducer","isLoading","pending","rejected","action","contactsReducer","combineReducers","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4fdaefae.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactItemName\":\"ContactItem_contactItemName__29BlS\",\"contactItemNumber\":\"ContactItem_contactItemNumber__14ski\",\"deleteBtn\":\"ContactItem_deleteBtn__D40RD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__3vatu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterInput\":\"Filter_filterInput__1mLfe\"};","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n// import {\n//   addContactError,\n//   addContactRequest,\n//   addContactSuccess,\n//   deleteContactRequest,\n//   deleteContactSuccess,\n//   deleteContactError,\n//   fetchContactsRequest,\n//   fetchContactsSuccess,\n//   fetchContactsError,\n// } from './contacts-actions';\n\naxios.defaults.baseURL = 'http://localhost:4040';\n\nexport const fetchContacts = createAsyncThunk(\n  'contacts/fetchContacts',\n  async (_, { rejectWithValue }) => {\n    try {\n      const { data } = await axios.get('/contacts');\n      return data;\n    } catch (error) {\n      return rejectWithValue(error);\n    }\n  },\n);\n\nexport const addContact = createAsyncThunk(\n  'contacts/addContact',\n  async ({ name, number }, { rejectWithValue }) => {\n    const contact = {\n      name,\n      number,\n    };\n    try {\n      const { data } = await axios.post('/contacts', contact);\n      return data;\n    } catch (error) {\n      return rejectWithValue(error);\n    }\n  },\n);\n\nexport const deleteContact = createAsyncThunk(\n  'contacts/deleteContact',\n  async (contactId, { rejectWithValue }) => {\n    try {\n      await axios.delete(`/contacts/${contactId}`);\n      return contactId;\n    } catch (error) {\n      return rejectWithValue(error);\n    }\n  },\n);\n\n// without createAsyncChunk\n\n// export const fetchContacts = () => async dispatch => {\n//   dispatch(fetchContactsRequest());\n\n//   try {\n//     const { data } = await axios.get('/contacts');\n//     dispatch(fetchContactsSuccess(data));\n//   } catch (error) {\n//     dispatch(fetchContactsError(error));\n//   }\n\n//   // axios\n//   //     .get('/contacts')\n//   //     .then(({ data }) => dispatch(fetchContactsSuccess(data)))\n//   //     .catch(error => dispatch(fetchContactsError(error)));\n// };\n\n// export const addContact =\n//   ({ name, number }) =>\n//   async dispatch => {\n//     const contact = {\n//       name,\n//       number,\n//     };\n\n//     dispatch(addContactRequest());\n\n//     try {\n//       const { data } = await axios.post('/contacts', contact);\n//       dispatch(addContactSuccess(data));\n//     } catch (error) {\n//       dispatch(addContactError(error));\n//     }\n\n//     // axios\n//     //     .post('/contacts', contact)\n//     //     .then(({ data }) =>\n//     //         dispatch(addContactSuccess(data)),\n//     //     )\n//     //     .catch(error =>\n//     //         dispatch(addContactError(error))\n//     //     );\n//   };\n\n// export const deleteContact = contactId => async dispatch => {\n//   dispatch(deleteContactRequest());\n\n//   try {\n//     await axios.delete(`/contacts/${contactId}`);\n//     dispatch(deleteContactSuccess(contactId));\n//   } catch (error) {\n//     dispatch(deleteContactError(error));\n//   }\n\n//   // axios\n//   //     .delete(`/contacts/${contactId}`)\n//   //     .then(() => dispatch(deleteContactSuccess(contactId)))\n//   //     .catch(error => dispatch(deleteContactError(error)));\n// };\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getItems = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\n\n// Мемоизация\nexport const getVisibleContacts = createSelector(\n  [getItems, getFilter],\n  (items, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return items.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n\n// export const getVisibleContacts = state => {\n//   const items = getItems(state);\n//   const filter = getFilter(state);\n//   const normalizedFilter = filter.toLowerCase();\n//   return items.filter(contact =>\n//     contact.name.toLowerCase().includes(normalizedFilter),\n//   );\n// };\n","import React, { useState } from 'react';\n// import PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport toast from 'react-hot-toast';\n\nimport { addContact } from 'redux/contacts/contacts-operations';\nimport { getItems } from 'redux/contacts/contacts-selectors';\n\nimport css from './ContactForm.module.css';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  // useSelector вместо mapStateToProps\n  const contacts = useSelector(getItems);\n\n  const dispatch = useDispatch();\n\n  console.log(name);\n\n  const handleInputChange = event => {\n    console.log(number);\n    const { name, value } = event.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const doubleContact = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\n    );\n\n    if (doubleContact) {\n      toast.error(`${name} is alredy in contacts.`);\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n    // onSubmit({ name, number });\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <label className={css.formInputLabel}>\n        Name\n        <input\n          className={css.formInput}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleInputChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n      <label className={css.formInputLabel}>\n        Number\n        <input\n          className={css.formInput}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleInputChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n      <button className={css.formInputBtn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\n// const mapStateToProps = state => ({\n//   contacts: state.contacts.items,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onSubmit: data => dispatch(addContact(data)),\n// });\n\n// ContactForm.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport css from './ContactItem.module.css';\n\nconst ContactItem = ({ name, number, onDelete }) => (\n  <>\n    <p>\n      <span className={css.contactItemName}>{name}:</span>\n      <span className={css.contactItemNumber}>{number}</span>\n      <button type=\"button\" className={css.deleteBtn} onClick={onDelete}>\n        Delete\n      </button>\n    </p>\n  </>\n);\n\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nexport default ContactItem;\n","import React from 'react';\nimport css from './ContactList.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contacts-operations';\nimport { getVisibleContacts } from 'redux/contacts/contacts-selectors';\n\nimport ContactItem from 'components/ContactItem';\n\nconst ContactList = () => {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n\n  const onDeleteContact = id => dispatch(deleteContact(id));\n\n  return (\n    <ul>\n      {contacts.map(({ id, name, number }) => (\n        <li key={id} className={css.contactItem}>\n          <ContactItem\n            name={name}\n            number={number}\n            onDelete={() => onDeleteContact(id)}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import React from 'react';\nimport css from './Container.module.css';\n\nconst Container = ({ children }) => (\n  <div className={css.container}>{children}</div>\n);\n\nexport default Container;\n","// import { v4 as uuidv4 } from 'uuid';\nimport { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactsRequest = createAction(\n  'contacts/fetchContactsRequest',\n);\nexport const fetchContactsSuccess = createAction(\n  'contacts/fetchContactsSuccess',\n);\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\n\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n\n// export const addContact = createAction('contacts/add', data => ({\n//   payload: {\n//     id: uuidv4(),\n//     name: data.name,\n//     number: data.number,\n//   },\n// }));\n\n// export const deleteContact = createAction('contacts/delete');\n\nexport const deleteContactRequest = createAction(\n  'contacts/deleteContactRequest',\n);\nexport const deleteContactSuccess = createAction(\n  'contacts/deleteContactSuccess',\n);\nexport const deleteContactError = createAction('contacts/deleteContactError');\n\nexport const changeFilter = createAction('contacts/filter');\n","import React from 'react';\nimport css from './Filter.module.css';\n// import PropTypes from 'prop-types';\n// import { connect } from 'react-redux';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { changeFilter } from 'redux/contacts/contacts-actions';\nimport { getFilter } from 'redux/contacts/contacts-selectors';\n\nconst Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <label>\n      Find contacts by name\n      <input\n        className={css.filterInput}\n        type=\"text\"\n        value={filter}\n        onChange={event => dispatch(changeFilter(event.target.value))}\n      />\n    </label>\n  );\n};\n\n// const mapStateToProps = state => ({\n//   value: state.contacts.filter,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onChange: event => dispatch(changeFilter(event.target.value)),\n// });\n\n// Filter.propTypes = {\n//   value: PropTypes.string.isRequired,\n//   onChange: PropTypes.func.isRequired,\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\nexport default Filter;\n","import React from 'react';\r\nimport { Toaster } from 'react-hot-toast';\r\nimport { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { fetchContacts } from 'redux/contacts/contacts-operations';\r\n\r\nimport ContactForm from './ContactForm';\r\nimport ContactList from './ContactList';\r\nimport Container from './Container';\r\nimport Filter from './Filter';\r\n\r\nexport default function App() {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => dispatch(fetchContacts()), [dispatch]);\r\n\r\n    // const [contacts, setContacts] = useState([\r\n    //     {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56'},\r\n    //     {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\r\n    //     {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\r\n    //     {id: 'id-4', name: 'Annie Copeland', number: '227-91-26'},\r\n    // ]);\r\n\r\n    // const [filter, setFilter] = useState('');\r\n\r\n    // useEffect(() => {\r\n    //     const contacts = localStorage.getItem('contacts');\r\n    //     const parsedContacts = JSON.parse(contacts);\r\n    //     if (parsedContacts) {\r\n    //         console.log(parsedContacts);\r\n    //         setContacts(parsedContacts);\r\n    //     };\r\n    // }, []);\r\n\r\n    // useEffect(() => {\r\n    //     localStorage.setItem('contacts', JSON.stringify(contacts));\r\n    // }, [contacts]);\r\n\r\n    // const formSubmitHandler = (data) => {\r\n    //     // Добавление контакта\r\n    //     const contact = {\r\n    //         id: uuidv4(),\r\n    //         name: data.name,\r\n    //         number: data.number,\r\n    //     };\r\n\r\n    //     // Проверка на дублирование имени\r\n    //     const doubleContact = contacts.find(contact => contact.name.toLowerCase() === data.name.toLowerCase());\r\n        \r\n    //     if (doubleContact) {\r\n    //         toast.error(`${data.name} is alredy in contacts.`);\r\n    //         return;\r\n    //     };\r\n\r\n    //     setContacts([contact, ...contacts]);\r\n    // };\r\n\r\n    // const changeFilter = event => {\r\n    //     setFilter(event.currentTarget.value);\r\n    // };\r\n\r\n    // const getVisibleContacts = () => {\r\n    //     const normalizedFilter = filter.toLowerCase();\r\n    //     return contacts.filter(contact =>\r\n    //         contact.name.toLowerCase().includes(normalizedFilter),\r\n    //     );\r\n    // };\r\n\r\n    // const deleteContact = (contactId) => {\r\n    //     setContacts(contacts.filter(contact => contact.id !== contactId));\r\n    // };\r\n\r\n    return (\r\n        <Container>\r\n            <Toaster/>\r\n            <h1>Phonebook</h1>\r\n            <ContactForm></ContactForm>\r\n            {/* <ContactForm onSubmit={formSubmitHandler}></ContactForm> */}\r\n            <h2>Contacts</h2>\r\n            <Filter></Filter>\r\n            <ContactList></ContactList>\r\n        </Container>\r\n    )\r\n}\r\n\r\n\r\n\r\n// export default function App() {\r\n//     const [contacts, setContacts] = useState([\r\n//         {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56'},\r\n//         {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\r\n//         {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\r\n//         {id: 'id-4', name: 'Annie Copeland', number: '227-91-26'},\r\n//     ]);\r\n\r\n//     const [filter, setFilter] = useState('');\r\n\r\n//     useEffect(() => {\r\n//         const contacts = localStorage.getItem('contacts');\r\n//         const parsedContacts = JSON.parse(contacts);\r\n//         if (parsedContacts) {\r\n//             console.log(parsedContacts);\r\n//             setContacts(parsedContacts);\r\n//         };\r\n//     }, []);\r\n\r\n//     useEffect(() => {\r\n//         localStorage.setItem('contacts', JSON.stringify(contacts));\r\n//     }, [contacts]);\r\n\r\n//     const formSubmitHandler = (data) => {\r\n//         // Добавление контакта\r\n//         const contact = {\r\n//             id: uuidv4(),\r\n//             name: data.name,\r\n//             number: data.number,\r\n//         };\r\n\r\n//         // Проверка на дублирование имени\r\n//         const doubleContact = contacts.find(contact => contact.name.toLowerCase() === data.name.toLowerCase());\r\n        \r\n//         if (doubleContact) {\r\n//             toast.error(`${data.name} is alredy in contacts.`);\r\n//             return;\r\n//         };\r\n\r\n//         setContacts([contact, ...contacts]);\r\n//     };\r\n\r\n//     const changeFilter = event => {\r\n//         setFilter(event.currentTarget.value);\r\n//     };\r\n\r\n//     const getVisibleContacts = () => {\r\n//         const normalizedFilter = filter.toLowerCase();\r\n//         return contacts.filter(contact =>\r\n//             contact.name.toLowerCase().includes(normalizedFilter),\r\n//         );\r\n//     };\r\n\r\n//     const deleteContact = (contactId) => {\r\n//         setContacts(contacts.filter(contact => contact.id !== contactId));\r\n//     };\r\n\r\n//     return (\r\n//         <Container>\r\n//             <Toaster/>\r\n//             <h1>Phonebook</h1>\r\n//             <ContactForm onSubmit={formSubmitHandler}></ContactForm>\r\n//             <h2>Contacts</h2>\r\n//             <Filter value={filter} onChange={changeFilter}></Filter>\r\n//             <ContactList \r\n//                 contacts={getVisibleContacts()}\r\n//                 onDeleteContact={deleteContact}\r\n//             ></ContactList>\r\n//         </Container>\r\n//     )\r\n// }\r\n\r\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\n// import {\n//   fetchContactsSuccess,\n//   addContactSuccess,\n//   deleteContactSuccess,\n//   fetchContactsRequest,\n//   fetchContactsError,\n// } from './contacts-actions';\nimport {\n  fetchContacts,\n  addContact,\n  deleteContact,\n} from './contacts-operations';\nimport { changeFilter } from './contacts-actions';\n\n// const itemsInitialState = [\n//   { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n//   { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n//   { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n//   { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n// ];\n\nconst itemsReducer = createReducer([], {\n  [fetchContacts.fulfilled]: (_, { payload }) => payload,\n  [addContact.fulfilled]: (state, { payload }) => [payload, ...state],\n  [deleteContact.fulfilled]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filterReducer = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nconst isLoading = createReducer(false, {\n  [fetchContacts.pending]: () => true,\n  [fetchContacts.fulfilled]: () => false,\n  [fetchContacts.rejected]: () => false,\n  [addContact.pending]: () => true,\n  [addContact.fulfilled]: () => false,\n  [addContact.rejected]: () => false,\n  [deleteContact.pending]: () => true,\n  [deleteContact.fulfilled]: () => false,\n  [deleteContact.rejected]: () => false,\n});\n\nconst error = createReducer(null, {\n  [fetchContacts.rejected]: (_, action) => action.payload,\n  [fetchContacts.pending]: () => null,\n});\n\n// without createAsyncChunk\n\n// const itemsReducer = createReducer([], {\n//   [fetchContactsSuccess]: (_, { payload }) => payload,\n//   [addContactSuccess]: (state, { payload }) => [payload, ...state],\n//   [deleteContactSuccess]: (state, { payload }) =>\n//     state.filter(({ id }) => id !== payload),\n// });\n\n// const filterReducer = createReducer('', {\n//   [changeFilter]: (_, { payload }) => payload,\n// });\n\n// const isLoading = createReducer(false, {\n//   [fetchContactsRequest]: () => true,\n//   [fetchContactsSuccess]: () => false,\n//   [fetchContactsError]: () => false,\n// });\n\n// const error = createReducer(null, {\n//   [fetchContactsError]: (_, action) => action.payload,\n//   [fetchContactsRequest]: () => null,\n// });\n\nexport const contactsReducer = combineReducers({\n  items: itemsReducer,\n  filter: filterReducer,\n  isLoading,\n  error,\n});\n","// import { combineReducers } from 'redux';\nimport { configureStore } from '@reduxjs/toolkit';\nimport {\n  // persistStore,\n  // persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport logger from 'redux-logger';\n// import storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\nimport { contactsReducer } from './contacts/contacts-reducer';\n\n// const persistConfig = {\n//   key: 'root',\n//   storage,\n// }\n\nconst middleware = getDefaultMiddleware => [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\n// const rootReducer = combineReducers({\n//   contacts: contactsReducer,\n// });\n\nexport const store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\n// export const persistor = persistStore(store);\n\nexport default store;\n\n// Использование Локал страредж\n\n// const contactsPersistConfig = {\n//   key: 'contacts',\n//   storage,\n//   blacklist: ['filter'],\n// };\n\n// export const store = configureStore({\n//   reducer: {\n//     contacts: persistReducer(contactsPersistConfig, contactsReducer),\n//   },\n//   middleware,\n//   devTools: process.env.NODE_ENV === 'development',\n// });\n\n// export const persistor = persistStore(store);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport { Provider } from 'react-redux';\nimport App from './components/App';\nimport store from 'redux/store';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3N0F6\",\"formInput\":\"ContactForm_formInput__22xdd\",\"formInputLabel\":\"ContactForm_formInputLabel__2gFlC\",\"formInputBtn\":\"ContactForm_formInputBtn__3N-nM\"};"],"sourceRoot":""}